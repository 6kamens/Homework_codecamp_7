[{"D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\index.js":"1","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\App.js":"2","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\reportWebVitals.js":"3","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\Corousel\\Corousel.jsx":"4","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\TodoList\\TodoList.jsx":"5","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\TodoList\\ToDo.jsx":"6","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\TodoList\\AddListForm.jsx":"7","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\Corousel\\Item.jsx":"8"},{"size":613,"mtime":1610990950803,"results":"9","hashOfConfig":"10"},{"size":689,"mtime":1610990950801,"results":"11","hashOfConfig":"10"},{"size":375,"mtime":1610990950803,"results":"12","hashOfConfig":"10"},{"size":3276,"mtime":1611069767167,"results":"13","hashOfConfig":"10"},{"size":2250,"mtime":1611065227177,"results":"14","hashOfConfig":"10"},{"size":1251,"mtime":1611065222661,"results":"15","hashOfConfig":"10"},{"size":1878,"mtime":1611051253607,"results":"16","hashOfConfig":"10"},{"size":1158,"mtime":1611069734416,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"7ql7q0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\index.js",[],["39","40"],"D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\App.js",["41"],"import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { Switch, Link, Route } from \"react-router-dom\";\r\nimport Corousel from \"./Corousel/Corousel\";\r\nimport TodoList from \"./TodoList/TodoList\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ul style={{listStyleType:\"none\"}}>\r\n        <li>\r\n          <Link to='/todo-list'>TO DO LIST</Link>\r\n        </li>\r\n        <li>\r\n          <Link to='/carousel'>COROUSEL SLIDE SHOW</Link>\r\n        </li>\r\n      </ul>\r\n      <Switch>\r\n        <Route path=\"/carousel\"  component={Corousel}></Route>\r\n        <Route path=\"/todo-list\"  component={TodoList}></Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\reportWebVitals.js",[],"D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\Corousel\\Corousel.jsx",[],"D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\TodoList\\TodoList.jsx",["42","43","44"],"import React, { useState } from \"react\";\r\nimport ToDo from \"./ToDo\";\r\nimport AddListForm from \"./AddListForm\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Header = styled.div`\r\n  background-color: #2a9df4;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 100px;\r\n  margin-bottom: 2rem;\r\n`;\r\n\r\nconst HeaderItem = styled.div`\r\n  width: 25%;\r\n  text-align: center;\r\n  @media (max-width: 768px) {\r\n    width: 50%;\r\n  }\r\n`;\r\n\r\nconst Title = styled.span`\r\n  font-size: 1.5rem;\r\n  font-weight: bold;\r\n  color: white;\r\n`;\r\n\r\nconst Search = styled.div`\r\n  width: 20%;\r\n`;\r\n\r\nconst SelectSort = styled.select`\r\n  padding:1rem;\r\n  font-size:1rem;\r\n`\r\n\r\nconst options = [\r\n  { value: \"all\", label: \"all\" },\r\n  { value: \"finished\", label: \"finished\" },\r\n  { value: \"canceled\", label: \"canceled\" },\r\n  { value: \"waiting\", label: \"waiting\" },\r\n];\r\n\r\nconst TodoLIst = (prop) => {\r\n  const [openBtn, setOpenBtn] = useState(true);\r\n  const [todoContent, setTodoContent] = useState(\"\");\r\n  const [todoList, setTodoList] = useState([]);\r\n  const [selectedSort, setSelectedSort] = useState(\"all\");\r\n\r\n  const sort = (selectedSort) => {\r\n    setSelectedSort(selectedSort.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header>\r\n        <HeaderItem>\r\n          <Title>To-Do</Title>\r\n        </HeaderItem>\r\n        <HeaderItem>\r\n          <SelectSort value={selectedSort.value} onChange={sort}>\r\n            {options.map((item)=>\r\n              <option value={item.label}>{item.label}</option>\r\n            )}\r\n          </SelectSort>\r\n        </HeaderItem>\r\n      </Header>\r\n      {todoList\r\n        .filter((x) => selectedSort == \"all\" || x.status == selectedSort)\r\n        .map((item, index) => (\r\n          <ToDo\r\n            key={index}\r\n            id={item.id}\r\n            text={item.text}\r\n            setTodoList={setTodoList}\r\n            todoList={todoList}\r\n            status={item.status}\r\n          ></ToDo>\r\n        ))}\r\n      <AddListForm\r\n        openAddBtn={openBtn}\r\n        setTodoList={setTodoList}\r\n        todoList={todoList}\r\n        content={todoContent}\r\n        todoContent={setTodoContent}\r\n        openInputForm={setOpenBtn}\r\n      ></AddListForm>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoLIst;\r\n","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\TodoList\\ToDo.jsx",["45"],"import styled from \"styled-components\";\r\nimport React from 'react';\r\n\r\nconst ToDoContent = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  text-align: center;\r\n`;\r\n\r\nconst ToDoItem = styled.div`\r\n  margin: 0.5rem;\r\n  width: 25%;\r\n  text-align: center;\r\n  @media (max-width: 768px) {\r\n    width: 50%;\r\n  }\r\n`;\r\n\r\nconst options = [\r\n  { value: \"finished\", label: \"finished\" },\r\n  { value: \"canceled\", label: \"canceled\" },\r\n  { value: \"waiting\", label: \"waiting\" },\r\n];\r\n\r\nconst SelectSort = styled.select`\r\n  padding:1rem;\r\n  font-size:1rem;\r\n`\r\n\r\nconst Todo = (props) => {\r\n\r\n  const changeStatusTodo =(existingStatus)=>{\r\n     props.todoList.find(x=>x.id == props.id).status = existingStatus.target.value ;\r\n     props.setTodoList([...props.todoList]);\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ToDoContent>\r\n        <ToDoItem>\r\n            {props.text}\r\n        </ToDoItem>\r\n        <ToDoItem>\r\n        <SelectSort value={props.status} onChange={changeStatusTodo}>\r\n            {options.map((item)=>\r\n              <option value={item.label}>{item.label}</option>\r\n            )}\r\n          </SelectSort>\r\n        </ToDoItem>\r\n      </ToDoContent>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\TodoList\\AddListForm.jsx",["46"],"import styled from \"styled-components\";\r\nimport uuid from 'react-uuid';\r\n\r\nconst Button = styled.button`\r\n  font-size: 1rem;\r\n  font-weight: bold;\r\n  padding-left: 0.75rem;\r\n  padding-right: 0.75rem;\r\n  margin: 0.5rem;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Form = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\n\r\nconst FormItem = styled.div`\r\n  margin: 2rem;\r\n  width: 25%;\r\n  text-align: center;\r\n  margin:1rem;\r\n  @media (max-width: 768px) {\r\n    width:100%;\r\n  }\r\n`;\r\n\r\nconst InputTodo = styled.input`\r\n  width: 100%;\r\n  font-size: 1rem;\r\n  padding: 1rem;\r\n`;\r\n\r\nconst AddListForm = (props) => {\r\n  const submitTodo = () => {\r\n      if(props.content.length != 0)\r\n      {\r\n        \r\n        const add = { id: uuid() ,  text: props.content, status: \"waiting\" };\r\n        props.setTodoList([...props.todoList,add]);\r\n      }\r\n   \r\n    props.todoContent(\"\");\r\n    props.openInputForm(true);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.openAddBtn && (\r\n        <Button onClick={() => props.openInputForm(false)}>\r\n          + Add a todo{\" \"}\r\n        </Button>\r\n      )}\r\n      {!props.openAddBtn && (\r\n        <FromInput\r\n          todoContent={props.todoContent}\r\n          openInputForm={props.openInputForm}\r\n          content={props.content}\r\n          submitTodo={submitTodo}\r\n        ></FromInput>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst FromInput = (props) => {\r\n  const onChangeContent = (e) => {\r\n    props.todoContent(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      <FormItem>\r\n        <InputTodo onChange={onChangeContent} value={props.content}></InputTodo>\r\n      </FormItem>\r\n      <FormItem>\r\n        <Button onClick={props.submitTodo}> Ok </Button>\r\n        <Button onClick={() => props.openInputForm(true)}> Exit </Button>\r\n      </FormItem>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddListForm;\r\n","D:\\codecamp\\Homework_codecamp_7\\react-hw\\src\\Corousel\\Item.jsx",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":1,"column":8,"nodeType":"53","messageId":"54","endLine":1,"endColumn":12},{"ruleId":"51","severity":1,"message":"55","line":29,"column":7,"nodeType":"53","messageId":"54","endLine":29,"endColumn":13},{"ruleId":"56","severity":1,"message":"57","line":70,"column":37,"nodeType":"58","messageId":"59","endLine":70,"endColumn":39},{"ruleId":"56","severity":1,"message":"57","line":70,"column":58,"nodeType":"58","messageId":"59","endLine":70,"endColumn":60},{"ruleId":"56","severity":1,"message":"57","line":34,"column":34,"nodeType":"58","messageId":"59","endLine":34,"endColumn":36},{"ruleId":"56","severity":1,"message":"60","line":39,"column":31,"nodeType":"58","messageId":"59","endLine":39,"endColumn":33},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Search' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]